v2.0 raw
# This file holds the microprogram data that you should load into your
# datapath's Microprogram ROM. Each row holds a 16-bit value that you will
# break into control signals to execute an instruction with a given opcode.
# As you implement additional opcodes you will need to change the hexadecimal
# values below. Don't forget to add comments that describe the control signals
# each opcode is configured to send.

# Control bits:
# 0: Write enable in register file
# 1: Ainv
# 2: Binv
# 3: Cin
# 4, 5, 6: ALU Op
# 7: Use r0 as second register input
# 8: branch instruction
# 9: invert branch sense (branch when ALU result is not zero)
# 10: jump instruction
# 11: unused
# 12: byte (0) or word (1)
# 13: write enable

# Opcode 0: add
# Write enable = 1. ALU op = 0
0001

# Opcode 1: sub
# Write enable = 1. Binv = 1. Cin = 1. ALU op = 0
000d

# Opcode 2: and
# Write enable = 1. ALU op = 1
0011

# Opcode 3: or
# Write enable = 1. ALU op = 2
0021

# Opcode 4: nand
# Write enable = 1. Ainv = 1. Binv = 1. ALU op = 2
0027

# Opcode 5: nor
# Write enable = 1. Ainv = 1. Binv = 1. ALU op = 1
0017

# Opcode 6: xor
# Write enable = 1. ALU op = 3
0031

# Opcode 7: slt
# Write enable = 1. ALU op = 4
0041

# Opcode 8: sltu
# Write enable = 1. ALU op = 5
0051

# Opcode 9: lb
0000

# Opcode 10: lw
0000

# Opcode 11: sb
2080

# Opcode 12: sw
3080

# Opcode 13: beq
018c

# Opcode 14: bne
038c

# Opcode 15: j
0401
